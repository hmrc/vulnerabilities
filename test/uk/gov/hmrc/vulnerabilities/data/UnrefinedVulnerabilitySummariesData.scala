/*
 * Copyright 2022 HM Revenue & Customs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package uk.gov.hmrc.vulnerabilities.data

import uk.gov.hmrc.vulnerabilities.model.{UnrefinedDistinctVulnerability, UnrefinedVulnerabilityOccurrence, UnrefinedVulnerabilitySummary}

import java.time.{Instant, LocalDateTime, ZoneOffset}
import java.time.temporal.ChronoUnit

object UnrefinedVulnerabilitySummariesData {

  val now: Instant = LocalDateTime.now().toInstant(ZoneOffset.UTC)

  val unrefined1 = UnrefinedVulnerabilitySummary(
    distinctVulnerability = UnrefinedDistinctVulnerability(
      vulnerableComponent = "gav://com.testxml.test.core:test-bind:1.6.8",
      description = "This is an exploit",
      fixedVersions = Some(Seq("1.6.9")),
      references = Seq("foo.com", "bar.net"),
      publishedDate = now.minus(14, ChronoUnit.DAYS)
    ),
    occurrences = Seq(
      UnrefinedVulnerabilityOccurrence(vulnComponent = "gav://com.testxml.test.core:test-bind:1.6.8", path = "test/slugs/service3/service3_3.0.4_0.0.1.tgz", componentPhysicalPath = "service3-3.0.4/some/physical/path"),
    ),
    id = "CVE-2021-99999",
    generatedDate = now,
    score = Some(7.0)
  )

  val unrefined2 = UnrefinedVulnerabilitySummary(
    distinctVulnerability = UnrefinedDistinctVulnerability(
      vulnerableComponent = "gav://com.testxml.test.core:test-bind:1.5.9",
      description = "This is an exploit",
      fixedVersions = Some(Seq("1.6.0")),
      references = Seq("foo.com", "bar.net"),
      publishedDate = now.minus(14, ChronoUnit.DAYS)
    ),
    occurrences = Seq(
      UnrefinedVulnerabilityOccurrence(vulnComponent = "gav://com.testxml.test.core:test-bind:1.5.9", path = "test/slugs/service1/service1_1.0.4_0.0.1.tgz", componentPhysicalPath = "service1-1.0.4/some/physical/path"),
      UnrefinedVulnerabilityOccurrence(vulnComponent = "gav://com.testxml.test.core:test-bind:1.5.9", path = "test/slugs/service3/service3_3.0.4_0.0.1.tgz", componentPhysicalPath = "service3-3.0.4/some/physical/path")
    ),
    id = "CVE-2022-12345",
    generatedDate = now,
    score = Some(8.0)
  )

  val unrefined3 = UnrefinedVulnerabilitySummary(
    distinctVulnerability = UnrefinedDistinctVulnerability(
      vulnerableComponent = "gav://com.testxml.test.core:test-bind:1.8.0",
      description = "This is an exploit",
      fixedVersions = Some(Seq("1.8.1")),
      references = Seq("foo.com", "bar.net"),
      publishedDate = now.minus(14, ChronoUnit.DAYS)
    ),
    occurrences = Seq(
      UnrefinedVulnerabilityOccurrence(vulnComponent = "gav://com.testxml.test.core:test-bind:1.8.0", path = "test/slugs/service4/service4_4.0.4_0.0.1.tgz", componentPhysicalPath = "service4-4.0.4/some/physical/path"),
    ),
    id = "XRAY-000004",
    generatedDate = now,
    score = None
  )

}
