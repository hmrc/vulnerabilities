/*
 * Copyright 2023 HM Revenue & Customs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package uk.gov.hmrc.vulnerabilities.persistence

import org.mongodb.scala.ObservableFuture
import org.scalatest.concurrent.IntegrationPatience
import org.scalatest.matchers.should.Matchers
import org.scalatest.wordspec.AnyWordSpec
import uk.gov.hmrc.mongo.test.DefaultPlayMongoRepositorySupport
import uk.gov.hmrc.vulnerabilities.model.{CVE, ServiceName, RawVulnerability, Report, Version, VulnerabilityAge}

import java.time.Instant
import scala.concurrent.ExecutionContext.Implicits.global

class VulnerabilityAgeRepositorySpec
  extends AnyWordSpec
    with Matchers
    with DefaultPlayMongoRepositorySupport[VulnerabilityAge]
    with IntegrationPatience:

  override val repository: VulnerabilityAgeRepository = VulnerabilityAgeRepository(mongoComponent)

  "insertNonExisting" should:
    "insert all documents that do not already exist in the collection" in:
      repository.collection.insertMany(Seq(
        VulnerabilityAge(serviceName = ServiceName("service1"), vulnerabilityId = "CVE-1", Instant.parse("2022-12-12T00:00:00.000Z"))
      )).toFuture().futureValue

      repository.insertNonExisting(
        Report(
          serviceName    = ServiceName("service1"),
          serviceVersion = Version("1.0.4"),
          slugUri        = "http://artifactory/webstore/service1_5.4.0.tgz",
          rows           = Seq(
                            RawVulnerability(
                              cves                  = Seq(CVE(cveId = Some("CVE-1"), cveV3Score = Some(8.0), cveV3Vector = Some("test"))),
                              cvss3MaxScore         = Some(8.0),
                              summary               = "This is an exploit",
                              severity              = "High",
                              severitySource        = "Source",
                              vulnerableComponent   = "gav://com.testxml.test.core:test-bind:1.5.9",
                              componentPhysicalPath = "service1-1.0.4/some/physical/path",
                              impactedArtefact      = "fooBar",
                              impactPath            = Seq("hello", "world"),
                              path                  = "test/slugs/service1/service1_1.0.4_0.0.1.tgz",
                              fixedVersions         = Seq("1.6.0"),
                              published             = Instant.parse("2022-12-01T00:00:00.000Z"),
                              artefactScanTime      = Instant.parse("2022-12-13T00:00:00.000Z"),
                              issueId               = "XRAY-000003",
                              packageType           = "maven",
                              provider              = "test",
                              description           = "This is an exploit",
                              references            = Seq("foo.com", "bar.net"),
                              projectKeys           = Seq()
                            ),
                            RawVulnerability(
                              cves                  = Seq(CVE(cveId = Some("CVE-2"), cveV3Score = Some(8.0), cveV3Vector = Some("test"))),
                              cvss3MaxScore         = Some(8.0),
                              summary               = "This is an exploit",
                              severity              = "High",
                              severitySource        = "Source",
                              vulnerableComponent   = "gav://com.testxml.test.core:test-bind:1.5.9",
                              componentPhysicalPath = "service1-1.0.4/some/physical/path",
                              impactedArtefact      = "fooBar",
                              impactPath            = Seq("hello", "world"),
                              path                  = "test/slugs/service1/service1_1.0.4_0.0.1.tgz",
                              fixedVersions         = Seq("1.6.0"),
                              published             = Instant.parse("2022-12-01T00:00:00.000Z"),
                              artefactScanTime      = Instant.parse("2022-12-13T00:00:00.000Z"),
                              issueId               = "XRAY-000003",
                              packageType           = "maven",
                              provider              = "test",
                              description           = "This is an exploit",
                              references            = Seq("foo.com", "bar.net"),
                              projectKeys           = Seq()
                            )
                          ),
          generatedDate = Instant.parse("2022-12-13T00:00:00.000Z"),
          scanned       = true,
          latest        = true,
          production    = true,
          externalTest  = true,
          staging       = true,
          qa            = true,
          development   = true,
          integration   = true
        )
      ).futureValue

      findAll().futureValue.length shouldBe 2
      findAll().futureValue shouldBe Seq(
        VulnerabilityAge(serviceName = ServiceName("service1"), vulnerabilityId = "CVE-1", Instant.parse("2022-12-12T00:00:00.000Z")),
        VulnerabilityAge(serviceName = ServiceName("service1"), vulnerabilityId = "CVE-2", Instant.parse("2022-12-13T00:00:00.000Z"))
      )

  "firstDetectedDate" should:
    "return the VulnerabilityAge with oldest first scanned date" in:
      repository.collection.insertMany(Seq(
        VulnerabilityAge(serviceName = ServiceName("service1"), vulnerabilityId = "CVE-1", Instant.parse("2022-12-12T00:00:00.000Z"))
      , VulnerabilityAge(serviceName = ServiceName("service2"), vulnerabilityId = "CVE-1", Instant.parse("2022-12-13T00:00:00.000Z"))
      )).toFuture().futureValue
      repository.firstDetected().futureValue shouldBe(Map("CVE-1" -> Instant.parse("2022-12-12T00:00:00.000Z")))
