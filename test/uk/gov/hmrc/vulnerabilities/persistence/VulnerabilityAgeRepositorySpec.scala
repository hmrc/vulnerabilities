/*
 * Copyright 2023 HM Revenue & Customs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package uk.gov.hmrc.vulnerabilities.persistence

import org.scalatest.concurrent.IntegrationPatience
import org.scalatest.matchers.should.Matchers
import org.scalatest.wordspec.AnyWordSpec
import uk.gov.hmrc.mongo.test.DefaultPlayMongoRepositorySupport
import uk.gov.hmrc.vulnerabilities.model.VulnerabilityAge

import java.time.Instant
import scala.concurrent.ExecutionContext.Implicits.global

class VulnerabilityAgeRepositorySpec
  extends AnyWordSpec
    with Matchers
    with DefaultPlayMongoRepositorySupport[VulnerabilityAge]
    with IntegrationPatience {

  override lazy val repository = new VulnerabilityAgeRepository(mongoComponent)

  "insertNonExisting" should {
    val va1 = VulnerabilityAge(service = "service1", vulnerabilityId = "CVE-1", Instant.parse("2022-12-12T00:00:00.000Z"))
    val va2 = VulnerabilityAge(service = "service1", vulnerabilityId = "CVE-1", Instant.parse("2022-12-13T00:00:00.000Z"))

    "insert all documents that do not already exist in the collection" in {
      repository.collection.insertMany(Seq(va1)).toFuture().futureValue

      repository.insertNonExisting(Seq(va1, va2)).futureValue

      findAll().futureValue.length shouldBe 1
      findAll().futureValue shouldBe Seq(va1)
    }
  }

}
