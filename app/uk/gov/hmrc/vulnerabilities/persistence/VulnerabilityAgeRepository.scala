/*
 * Copyright 2023 HM Revenue & Customs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package uk.gov.hmrc.vulnerabilities.persistence

import org.mongodb.scala.model.{Filters, IndexModel, IndexOptions, Indexes, ReplaceOneModel, ReplaceOptions}
import uk.gov.hmrc.mongo.MongoComponent
import uk.gov.hmrc.mongo.play.json.PlayMongoRepository
import uk.gov.hmrc.vulnerabilities.model.VulnerabilityAge
import cats.implicits._
import uk.gov.hmrc.mongo.transaction.{TransactionConfiguration, Transactions}

import javax.inject.{Inject, Singleton}
import scala.concurrent.{ExecutionContext, Future}

@Singleton
class VulnerabilityAgeRepository @Inject()(
  override val mongoComponent: MongoComponent
)(implicit
  ec            : ExecutionContext
) extends PlayMongoRepository(
  collectionName = "vulnerabilityAge",
  mongoComponent = mongoComponent,
  domainFormat   = VulnerabilityAge.mongoFormat,
  indexes        = Seq(
    IndexModel(Indexes.ascending("service"),         IndexOptions().name("service")        .background(true)),
    IndexModel(Indexes.ascending("vulnerabilityId"), IndexOptions().name("vulnerabilityId").background(true))
  )
) with Transactions {

  //TODO delete ages when the vulnerability is fixed/removed
  // unnecessary as data is cleaned down in `...`
  override lazy val requiresTtlIndex = false


  private implicit val tc = TransactionConfiguration.strict

  def insertNonExisting(vulnerabilityAges: Seq[VulnerabilityAge]): Future[Seq[Unit]] =
    withSessionAndTransaction(session =>
      vulnerabilityAges.foldLeftM[Future, Seq[Unit]](Seq.empty) {(acc, va) =>
        for {
          opt     <- collection.find(
                       Filters.and(
                         Filters.equal("service",         va.service        ),
                         Filters.equal("vulnerabilityId", va.vulnerabilityId)
                       )
                     ).toFuture().map(_.headOption)

          result  <- opt match {
                       case Some(_) => Future.unit
                       case None    => collection.insertOne(session, va).toFuture().map(_ => ())
                     }
        } yield acc :+ result
      }
    )
}
