/*
 * Copyright 2023 HM Revenue & Customs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package uk.gov.hmrc.vulnerabilities.persistence

import cats.implicits._
import com.mongodb.client.model.Indexes
import org.mongodb.scala.model.Aggregates.{`match`, limit, sort}
import org.mongodb.scala.model.Sorts.{ascending, orderBy}
import org.mongodb.scala.model.{Filters, IndexModel, IndexOptions}
import uk.gov.hmrc.mongo.MongoComponent
import uk.gov.hmrc.mongo.MongoUtils.DuplicateKey
import uk.gov.hmrc.mongo.play.json.PlayMongoRepository
import uk.gov.hmrc.vulnerabilities.model.VulnerabilityAge

import javax.inject.{Inject, Singleton}
import scala.concurrent.{ExecutionContext, Future}

@Singleton
class VulnerabilityAgeRepository @Inject()(
  mongoComponent: MongoComponent
)(implicit
  ec            : ExecutionContext
) extends PlayMongoRepository(
  collectionName = "vulnerabilityAge",
  mongoComponent = mongoComponent,
  domainFormat   = VulnerabilityAge.mongoFormat,
  indexes        = Seq(
    IndexModel(Indexes.ascending("vulnerabilityId", "service"), IndexOptions().unique(true).background(true))
  )
) {

  override lazy val requiresTtlIndex = false

  def insertNonExisting(vulnerabilityAges: Seq[VulnerabilityAge]): Future[Unit] =
    vulnerabilityAges.foldLeftM[Future, Unit](()){ (_, va) =>
      collection
        .insertOne(va)
        .toFuture().map(_ => ())
        .recover { case DuplicateKey(_) => () }
    }

  def firstDetectedDate(vulnerabilityId: String): Future[Option[VulnerabilityAge]] =
    collection.aggregate(
      Seq(
        `match`(Filters.equal("vulnerabilityId", vulnerabilityId)),
        sort(orderBy(ascending("firstScanned"))),
        limit(1)
      )
    ).headOption()
}
